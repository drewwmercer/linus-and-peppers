// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Function tests implement #113 : typehint nodes 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "byref": false,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "a",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "int",
            "raw": "int",
          },
          "value": Number {
            "kind": "number",
            "value": "1",
          },
          "variadic": false,
        },
        Parameter {
          "byref": false,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "b",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "float",
            "raw": "float",
          },
          "value": Number {
            "kind": "number",
            "value": "1",
          },
          "variadic": false,
        },
        Parameter {
          "byref": false,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "c",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "bool",
            "raw": "bool",
          },
          "value": Number {
            "kind": "number",
            "value": "1",
          },
          "variadic": false,
        },
        Parameter {
          "byref": false,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "d",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "string",
            "raw": "string",
          },
          "value": null,
          "variadic": false,
        },
        Parameter {
          "byref": false,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "e",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "callable",
            "raw": "callable",
          },
          "value": null,
          "variadic": false,
        },
        Parameter {
          "byref": false,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "f",
          },
          "nullable": false,
          "type": Name {
            "kind": "name",
            "name": "int\\\\bar",
            "resolution": "qn",
          },
          "value": null,
          "variadic": false,
        },
        Parameter {
          "byref": true,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "params",
          },
          "nullable": true,
          "type": TypeReference {
            "kind": "typereference",
            "name": "array",
            "raw": "array",
          },
          "value": null,
          "variadic": true,
        },
      ],
      "body": Block {
        "children": Array [],
        "kind": "block",
      },
      "byref": true,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "foo",
      },
      "nullable": true,
      "type": TypeReference {
        "kind": "typereference",
        "name": "object",
        "raw": "object",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Function tests implement #196 : set function name as identifier 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "byref": false,
          "kind": "parameter",
          "leadingComments": Array [
            CommentBlock {
              "kind": "commentblock",
              "offset": 18,
              "value": "/* f */",
            },
          ],
          "name": Identifier {
            "kind": "identifier",
            "name": "a",
          },
          "nullable": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "body": Block {
        "children": Array [],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "f",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "comments": Array [
    CommentBlock {
      "kind": "commentblock",
      "offset": 18,
      "value": "/* f */",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Function tests test arrow function php 7.4 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "body": Block {
        "children": Array [],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": false,
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Function tests test function parsing 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "byref": false,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "a",
          },
          "nullable": false,
          "type": null,
          "value": Number {
            "kind": "number",
            "value": "1",
          },
          "variadic": false,
        },
        Parameter {
          "byref": false,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "b",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "callable",
            "raw": "callable",
          },
          "value": null,
          "variadic": false,
        },
        Parameter {
          "byref": true,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "params",
          },
          "nullable": true,
          "type": TypeReference {
            "kind": "typereference",
            "name": "array",
            "raw": "array",
          },
          "value": null,
          "variadic": true,
        },
      ],
      "body": Block {
        "children": Array [],
        "kind": "block",
      },
      "byref": true,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "foo",
      },
      "nullable": true,
      "type": Name {
        "kind": "name",
        "name": "boolean",
        "resolution": "uqn",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Closure {
          "arguments": Array [
            Parameter {
              "byref": false,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "b",
              },
              "nullable": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "body": Block {
            "children": Array [
              Return {
                "expr": Boolean {
                  "kind": "boolean",
                  "raw": "true",
                  "value": true,
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": true,
          "isStatic": false,
          "kind": "closure",
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "array",
            "raw": "array",
          },
          "uses": Array [
            Variable {
              "byref": true,
              "curly": false,
              "kind": "variable",
              "name": "c",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "d",
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            variadic {
              "kind": "variadic",
              "what": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": NullKeyword {
                      "kind": "nullkeyword",
                      "raw": "null",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "2",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "3",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Function tests test reserved word for function name error 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "body": Block {
        "children": Array [],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": false,
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [
    Error {
      "expected": 105,
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected 'list' (T_LIST), expecting T_STRING on line 1",
      "token": "'list' (T_LIST)",
    },
  ],
  "kind": "program",
}
`;

exports[`Function tests test static closure 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Closure {
          "arguments": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isStatic": true,
          "kind": "closure",
          "nullable": false,
          "type": null,
          "uses": Array [],
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Function tests test variadic error 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            variadic {
              "kind": "variadic",
              "what": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "2",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "3",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [
    Error {
      "expected": undefined,
      "kind": "error",
      "line": 1,
      "message": "Unexpected argument after a variadic argument on line 1",
      "token": undefined,
    },
  ],
  "kind": "program",
}
`;
